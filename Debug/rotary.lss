
rotary.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000328  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000039c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ebf  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000874  00000000  00000000  00001377  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070d  00000000  00000000  00001beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  000022f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fd  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069e  00000000  00000000  0000285d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002efb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	4b c0       	rjmp	.+150    	; 0xa4 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 36       	cpi	r26, 0x62	; 98
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	10 d1       	rcall	.+544    	; 0x264 <main>
  44:	6f c1       	rjmp	.+734    	; 0x324 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <rotary_init>:



void rotary_init()
{	
	status = 0;
  48:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <status>
	cnt = 0;
  4c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	DDRB |= (1<<PB1) | (1<<PB2);
  50:	87 b3       	in	r24, 0x17	; 23
  52:	86 60       	ori	r24, 0x06	; 6
  54:	87 bb       	out	0x17, r24	; 23
			
	TCCR1A =	(1<<COM1A0);
  56:	80 e4       	ldi	r24, 0x40	; 64
  58:	8f bd       	out	0x2f, r24	; 47
	TCCR1B =	TIMER_CONTROL;			//F_TIMER = 125 kHz -> for F_INT = 1 kHz count to 125-1 (interrupt fired 1 cycle later)
  5a:	8b e0       	ldi	r24, 0x0B	; 11
  5c:	8e bd       	out	0x2e, r24	; 46
	OCR1A  =	TIMER_COMPARE;
  5e:	8c e7       	ldi	r24, 0x7C	; 124
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	9b bd       	out	0x2b, r25	; 43
  64:	8a bd       	out	0x2a, r24	; 42
	
	TIMSK |= (1<<OCIE1A);										//Enable Output compare match interrupt enable (@TIMER_COMPARE)
  66:	89 b7       	in	r24, 0x39	; 57
  68:	80 61       	ori	r24, 0x10	; 16
  6a:	89 bf       	out	0x39, r24	; 57
	
	status |=  (SIGNAL_PIN & (1<<SIGNAL_A))>>(SIGNAL_A-1) ;		//write new status
  6c:	90 b3       	in	r25, 0x10	; 16
  6e:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <status>
  72:	90 78       	andi	r25, 0x80	; 128
  74:	89 2f       	mov	r24, r25
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	08 2e       	mov	r0, r24
  7a:	89 2f       	mov	r24, r25
  7c:	00 0c       	add	r0, r0
  7e:	88 1f       	adc	r24, r24
  80:	99 0b       	sbc	r25, r25
  82:	00 0c       	add	r0, r0
  84:	88 1f       	adc	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	82 2b       	or	r24, r18
  8a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <status>
	status |=  (SIGNAL_PIN & (1<<SIGNAL_B))>>(SIGNAL_B) ;		//write new status
  8e:	90 b3       	in	r25, 0x10	; 16
  90:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <status>
  94:	96 fb       	bst	r25, 6
  96:	88 27       	eor	r24, r24
  98:	80 f9       	bld	r24, 0
  9a:	82 2b       	or	r24, r18
  9c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <status>
	
	sei();														//start global interrupts
  a0:	78 94       	sei
  a2:	08 95       	ret

000000a4 <__vector_6>:
	
}

ISR (TIMER1_COMPA_vect)											//executing every 1ms
{	
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	status = status << 2;										//shift to make place for new status
  b4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <status>
  b8:	88 0f       	add	r24, r24
  ba:	88 0f       	add	r24, r24
  bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <status>
	status |=  (SIGNAL_PIN & (1<<SIGNAL_A))>>(SIGNAL_A-1) ;		//write new status
  c0:	90 b3       	in	r25, 0x10	; 16
  c2:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <status>
  c6:	90 78       	andi	r25, 0x80	; 128
  c8:	89 2f       	mov	r24, r25
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	08 2e       	mov	r0, r24
  ce:	89 2f       	mov	r24, r25
  d0:	00 0c       	add	r0, r0
  d2:	88 1f       	adc	r24, r24
  d4:	99 0b       	sbc	r25, r25
  d6:	00 0c       	add	r0, r0
  d8:	88 1f       	adc	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	82 2b       	or	r24, r18
  de:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <status>
	status |=  (SIGNAL_PIN & (1<<SIGNAL_B))>>(SIGNAL_B) ;		//write new status
  e2:	90 b3       	in	r25, 0x10	; 16
  e4:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <status>
  e8:	96 fb       	bst	r25, 6
  ea:	88 27       	eor	r24, r24
  ec:	80 f9       	bld	r24, 0
  ee:	82 2b       	or	r24, r18
  f0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <status>
	
	if((status & 0x0F) == 0xB || (status & 0x0F) == 0x4)
  f4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <status>
  f8:	8f 70       	andi	r24, 0x0F	; 15
  fa:	8b 30       	cpi	r24, 0x0B	; 11
  fc:	29 f0       	breq	.+10     	; 0x108 <__vector_6+0x64>
  fe:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <status>
 102:	8f 70       	andi	r24, 0x0F	; 15
 104:	84 30       	cpi	r24, 0x04	; 4
 106:	29 f4       	brne	.+10     	; 0x112 <__vector_6+0x6e>
			cnt ++;	
 108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				
	if((status & 0x0F) == 0x7 || (status & 0x0F) == 0x8)
 112:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <status>
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	87 30       	cpi	r24, 0x07	; 7
 11a:	29 f0       	breq	.+10     	; 0x126 <__vector_6+0x82>
 11c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <status>
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	29 f4       	brne	.+10     	; 0x130 <__vector_6+0x8c>
			cnt --;  
 126:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	81 50       	subi	r24, 0x01	; 1
 12c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <lcd_enable>:

////////////////////////////////////////////////////////////////////////////////
// Erzeugt einen Enable-Puls
static void lcd_enable( void )
{
	LCD_PORT |= (1<<LCD_EN);     // Enable auf 1 setzen
 140:	ad 9a       	sbi	0x15, 5	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	85 e3       	ldi	r24, 0x35	; 53
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_enable+0x4>
 148:	00 00       	nop
	_delay_us( LCD_ENABLE_US );  // kurze Pause
	LCD_PORT &= ~(1<<LCD_EN);    // Enable auf 0 setzen
 14a:	ad 98       	cbi	0x15, 5	; 21
 14c:	08 95       	ret

0000014e <lcd_out>:
// Sendet eine 4-bit Ausgabeoperation an das LCD
static void lcd_out( uint8_t data )
{
	data &= 0xF0;                       // obere 4 Bit maskieren
	
	LCD_PORT &= ~(0xF0>>(4-LCD_DB));    // Maske löschen
 14e:	95 b3       	in	r25, 0x15	; 21
 150:	90 7f       	andi	r25, 0xF0	; 240
 152:	95 bb       	out	0x15, r25	; 21
	LCD_PORT |= (data>>(4-LCD_DB));     // Bits setzen
 154:	95 b3       	in	r25, 0x15	; 21
 156:	82 95       	swap	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	98 2b       	or	r25, r24
 15c:	95 bb       	out	0x15, r25	; 21
	lcd_enable();
 15e:	f0 df       	rcall	.-32     	; 0x140 <lcd_enable>
 160:	08 95       	ret

00000162 <lcd_data>:
}

////////////////////////////////////////////////////////////////////////////////
// Sendet ein Datenbyte an das LCD
void lcd_data( uint8_t data )
{
 162:	cf 93       	push	r28
 164:	c8 2f       	mov	r28, r24
	LCD_PORT |= (1<<LCD_RS);    // RS auf 1 setzen
 166:	ac 9a       	sbi	0x15, 4	; 21
	
	lcd_out( data );            // zuerst die oberen,
 168:	f2 df       	rcall	.-28     	; 0x14e <lcd_out>
	lcd_out( data<<4 );         // dann die unteren 4 Bit senden
 16a:	8c 2f       	mov	r24, r28
 16c:	82 95       	swap	r24
 16e:	80 7f       	andi	r24, 0xF0	; 240
 170:	ee df       	rcall	.-36     	; 0x14e <lcd_out>
 172:	8a e7       	ldi	r24, 0x7A	; 122
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_data+0x12>
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_data+0x18>
	
	_delay_us( LCD_WRITEDATA_US );
}
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <lcd_command>:

////////////////////////////////////////////////////////////////////////////////
// Sendet einen Befehl an das LCD
void lcd_command( uint8_t data )
{
 17e:	cf 93       	push	r28
 180:	c8 2f       	mov	r28, r24
	LCD_PORT &= ~(1<<LCD_RS);    // RS auf 0 setzen
 182:	ac 98       	cbi	0x15, 4	; 21
	
	lcd_out( data );             // zuerst die oberen,
 184:	e4 df       	rcall	.-56     	; 0x14e <lcd_out>
	lcd_out( data<<4 );           // dann die unteren 4 Bit senden
 186:	8c 2f       	mov	r24, r28
 188:	82 95       	swap	r24
 18a:	80 7f       	andi	r24, 0xF0	; 240
 18c:	e0 df       	rcall	.-64     	; 0x14e <lcd_out>
 18e:	80 e7       	ldi	r24, 0x70	; 112
 190:	8a 95       	dec	r24
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_command+0x12>
	
	_delay_us( LCD_COMMAND_US );
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <lcd_clear>:

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl zur Löschung des Displays
void lcd_clear( void )
{
	lcd_command( LCD_CLEAR_DISPLAY );
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	f1 df       	rcall	.-30     	; 0x17e <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	8f e9       	ldi	r24, 0x9F	; 159
 19e:	9f e0       	ldi	r25, 0x0F	; 15
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <lcd_clear+0x8>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <lcd_clear+0xe>
 1a6:	00 00       	nop
 1a8:	08 95       	ret

000001aa <lcd_init>:
{
	// verwendete Pins auf Ausgang schalten
	uint8_t pins = (0x0F << LCD_DB) |           // 4 Datenleitungen
	(1<<LCD_RS) |                // R/S Leitung
	(1<<LCD_EN);                 // Enable Leitung
	LCD_DDR |= pins;
 1aa:	84 b3       	in	r24, 0x14	; 20
 1ac:	8f 63       	ori	r24, 0x3F	; 63
 1ae:	84 bb       	out	0x14, r24	; 20
	
	// initial alle Ausgänge auf Null
	LCD_PORT &= ~pins;
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	80 7c       	andi	r24, 0xC0	; 192
 1b4:	85 bb       	out	0x15, r24	; 21
 1b6:	8f e2       	ldi	r24, 0x2F	; 47
 1b8:	95 e7       	ldi	r25, 0x75	; 117
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x10>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x16>
 1c0:	00 00       	nop
	
	// warten auf die Bereitschaft des LCD
	_delay_ms( LCD_BOOTUP_MS );
	
	// Soft-Reset muss 3mal hintereinander gesendet werden zur Initialisierung
	lcd_out( LCD_SOFT_RESET );
 1c2:	80 e3       	ldi	r24, 0x30	; 48
 1c4:	c4 df       	rcall	.-120    	; 0x14e <lcd_out>
 1c6:	8f e0       	ldi	r24, 0x0F	; 15
 1c8:	97 e2       	ldi	r25, 0x27	; 39
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_init+0x20>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_init+0x26>
 1d0:	00 00       	nop
	_delay_ms( LCD_SOFT_RESET_MS1 );
	
	lcd_enable();
 1d2:	b6 df       	rcall	.-148    	; 0x140 <lcd_enable>
 1d4:	8f ec       	ldi	r24, 0xCF	; 207
 1d6:	97 e0       	ldi	r25, 0x07	; 7
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x2e>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_init+0x34>
 1de:	00 00       	nop
	_delay_ms( LCD_SOFT_RESET_MS2 );
	
	lcd_enable();
 1e0:	af df       	rcall	.-162    	; 0x140 <lcd_enable>
 1e2:	8f ec       	ldi	r24, 0xCF	; 207
 1e4:	97 e0       	ldi	r25, 0x07	; 7
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_init+0x3c>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_init+0x42>
 1ec:	00 00       	nop
	_delay_ms( LCD_SOFT_RESET_MS3 );
	
	// 4-bit Modus aktivieren
	lcd_out( LCD_SET_FUNCTION |
 1ee:	80 e2       	ldi	r24, 0x20	; 32
 1f0:	ae df       	rcall	.-164    	; 0x14e <lcd_out>
 1f2:	8f e0       	ldi	r24, 0x0F	; 15
 1f4:	97 e2       	ldi	r25, 0x27	; 39
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_init+0x4c>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_init+0x52>
 1fc:	00 00       	nop
	LCD_FUNCTION_4BIT );
	_delay_ms( LCD_SET_4BITMODE_MS );
	
	// 4-bit Modus / 2 Zeilen / 5x7
	lcd_command( LCD_SET_FUNCTION |
 1fe:	88 e2       	ldi	r24, 0x28	; 40
 200:	be df       	rcall	.-132    	; 0x17e <lcd_command>
	LCD_FUNCTION_4BIT |
	LCD_FUNCTION_2LINE |
	LCD_FUNCTION_5X7 );
	
	// Display ein / Cursor aus / Blinken aus
	lcd_command( LCD_SET_DISPLAY |
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	bc df       	rcall	.-136    	; 0x17e <lcd_command>
	LCD_DISPLAY_ON |
	LCD_CURSOR_OFF |
	LCD_BLINKING_OFF);
	
	// Cursor inkrement / kein Scrollen
	lcd_command( LCD_SET_ENTRY |
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	ba df       	rcall	.-140    	; 0x17e <lcd_command>
	LCD_ENTRY_INCREASE |
	LCD_ENTRY_NOSHIFT );
	
	lcd_clear();
 20a:	c6 df       	rcall	.-116    	; 0x198 <lcd_clear>
 20c:	08 95       	ret

0000020e <lcd_home>:

////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl: Cursor Home
void lcd_home( void )
{
	lcd_command( LCD_CURSOR_HOME );
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	b6 df       	rcall	.-148    	; 0x17e <lcd_command>
 212:	8f e9       	ldi	r24, 0x9F	; 159
 214:	9f e0       	ldi	r25, 0x0F	; 15
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <lcd_home+0x8>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_home+0xe>
 21c:	00 00       	nop
 21e:	08 95       	ret

00000220 <lcd_setcursor>:

void lcd_setcursor( uint8_t x, uint8_t y )
{
	uint8_t data;
	
	switch (y)
 220:	62 30       	cpi	r22, 0x02	; 2
 222:	59 f0       	breq	.+22     	; 0x23a <lcd_setcursor+0x1a>
 224:	18 f4       	brcc	.+6      	; 0x22c <lcd_setcursor+0xc>
 226:	61 30       	cpi	r22, 0x01	; 1
 228:	31 f0       	breq	.+12     	; 0x236 <lcd_setcursor+0x16>
 22a:	08 95       	ret
 22c:	63 30       	cpi	r22, 0x03	; 3
 22e:	39 f0       	breq	.+14     	; 0x23e <lcd_setcursor+0x1e>
 230:	64 30       	cpi	r22, 0x04	; 4
 232:	39 f0       	breq	.+14     	; 0x242 <lcd_setcursor+0x22>
 234:	08 95       	ret
	{
		case 1:    // 1. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE1 + x;
 236:	80 58       	subi	r24, 0x80	; 128
		break;
 238:	05 c0       	rjmp	.+10     	; 0x244 <lcd_setcursor+0x24>
		
		case 2:    // 2. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE2 + x;
 23a:	80 54       	subi	r24, 0x40	; 64
		break;
 23c:	03 c0       	rjmp	.+6      	; 0x244 <lcd_setcursor+0x24>
		
		case 3:    // 3. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE3 + x;
 23e:	80 57       	subi	r24, 0x70	; 112
		break;
 240:	01 c0       	rjmp	.+2      	; 0x244 <lcd_setcursor+0x24>
		
		case 4:    // 4. Zeile
		data = LCD_SET_DDADR + LCD_DDADR_LINE4 + x;
 242:	80 53       	subi	r24, 0x30	; 48
		
		default:
		return;                                   // für den Fall einer falschen Zeile
	}
	
	lcd_command( data );
 244:	9c df       	rcall	.-200    	; 0x17e <lcd_command>
 246:	08 95       	ret

00000248 <lcd_string>:

////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	ec 01       	movw	r28, r24
	while( *data != '\0' )
 24e:	88 81       	ld	r24, Y
 250:	88 23       	and	r24, r24
 252:	29 f0       	breq	.+10     	; 0x25e <lcd_string+0x16>
 254:	21 96       	adiw	r28, 0x01	; 1
	lcd_data( *data++ );
 256:	85 df       	rcall	.-246    	; 0x162 <lcd_data>
////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD

void lcd_string( const char *data )
{
	while( *data != '\0' )
 258:	89 91       	ld	r24, Y+
 25a:	81 11       	cpse	r24, r1
 25c:	fc cf       	rjmp	.-8      	; 0x256 <lcd_string+0xe>
	lcd_data( *data++ );
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <main>:
#include <util/delay.h>
#include "rotary.h"
#include <stdlib.h>

int main(void)
{		
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	60 97       	sbiw	r28, 0x10	; 16
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	f8 94       	cli
 272:	de bf       	out	0x3e, r29	; 62
 274:	0f be       	out	0x3f, r0	; 63
 276:	cd bf       	out	0x3d, r28	; 61
	char buffer[16];
	
	rotary_init();
 278:	e7 de       	rcall	.-562    	; 0x48 <rotary_init>
	
	lcd_init();
 27a:	97 df       	rcall	.-210    	; 0x1aa <lcd_init>

	

    while (1) 
    {	
		lcd_clear();
 27c:	8d df       	rcall	.-230    	; 0x198 <lcd_clear>
		lcd_home();
 27e:	c7 df       	rcall	.-114    	; 0x20e <lcd_home>
		lcd_string(itoa(status,buffer,2));
 280:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <status>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 284:	42 e0       	ldi	r20, 0x02	; 2
 286:	be 01       	movw	r22, r28
 288:	6f 5f       	subi	r22, 0xFF	; 255
 28a:	7f 4f       	sbci	r23, 0xFF	; 255
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	17 d0       	rcall	.+46     	; 0x2be <__itoa_ncheck>
 290:	db df       	rcall	.-74     	; 0x248 <lcd_string>
		lcd_setcursor(0,2);
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	c4 df       	rcall	.-120    	; 0x220 <lcd_setcursor>
		lcd_string(itoa(cnt,buffer,10));
 298:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 29c:	4a e0       	ldi	r20, 0x0A	; 10
 29e:	be 01       	movw	r22, r28
 2a0:	6f 5f       	subi	r22, 0xFF	; 255
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0b d0       	rcall	.+22     	; 0x2be <__itoa_ncheck>
 2a8:	cf df       	rcall	.-98     	; 0x248 <lcd_string>
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	89 e6       	ldi	r24, 0x69	; 105
 2ae:	98 e1       	ldi	r25, 0x18	; 24
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <main+0x4c>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x56>
 2ba:	00 00       	nop
 2bc:	df cf       	rjmp	.-66     	; 0x27c <main+0x18>

000002be <__itoa_ncheck>:
 2be:	bb 27       	eor	r27, r27
 2c0:	4a 30       	cpi	r20, 0x0A	; 10
 2c2:	31 f4       	brne	.+12     	; 0x2d0 <__itoa_ncheck+0x12>
 2c4:	99 23       	and	r25, r25
 2c6:	22 f4       	brpl	.+8      	; 0x2d0 <__itoa_ncheck+0x12>
 2c8:	bd e2       	ldi	r27, 0x2D	; 45
 2ca:	90 95       	com	r25
 2cc:	81 95       	neg	r24
 2ce:	9f 4f       	sbci	r25, 0xFF	; 255
 2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <__utoa_common>

000002d2 <__utoa_ncheck>:
 2d2:	bb 27       	eor	r27, r27

000002d4 <__utoa_common>:
 2d4:	fb 01       	movw	r30, r22
 2d6:	55 27       	eor	r21, r21
 2d8:	aa 27       	eor	r26, r26
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	aa 1f       	adc	r26, r26
 2e0:	a4 17       	cp	r26, r20
 2e2:	10 f0       	brcs	.+4      	; 0x2e8 <__utoa_common+0x14>
 2e4:	a4 1b       	sub	r26, r20
 2e6:	83 95       	inc	r24
 2e8:	50 51       	subi	r21, 0x10	; 16
 2ea:	b9 f7       	brne	.-18     	; 0x2da <__utoa_common+0x6>
 2ec:	a0 5d       	subi	r26, 0xD0	; 208
 2ee:	aa 33       	cpi	r26, 0x3A	; 58
 2f0:	08 f0       	brcs	.+2      	; 0x2f4 <__utoa_common+0x20>
 2f2:	a9 5d       	subi	r26, 0xD9	; 217
 2f4:	a1 93       	st	Z+, r26
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	79 f7       	brne	.-34     	; 0x2d8 <__utoa_common+0x4>
 2fa:	b1 11       	cpse	r27, r1
 2fc:	b1 93       	st	Z+, r27
 2fe:	11 92       	st	Z+, r1
 300:	cb 01       	movw	r24, r22
 302:	00 c0       	rjmp	.+0      	; 0x304 <strrev>

00000304 <strrev>:
 304:	dc 01       	movw	r26, r24
 306:	fc 01       	movw	r30, r24
 308:	67 2f       	mov	r22, r23
 30a:	71 91       	ld	r23, Z+
 30c:	77 23       	and	r23, r23
 30e:	e1 f7       	brne	.-8      	; 0x308 <strrev+0x4>
 310:	32 97       	sbiw	r30, 0x02	; 2
 312:	04 c0       	rjmp	.+8      	; 0x31c <strrev+0x18>
 314:	7c 91       	ld	r23, X
 316:	6d 93       	st	X+, r22
 318:	70 83       	st	Z, r23
 31a:	62 91       	ld	r22, -Z
 31c:	ae 17       	cp	r26, r30
 31e:	bf 07       	cpc	r27, r31
 320:	c8 f3       	brcs	.-14     	; 0x314 <strrev+0x10>
 322:	08 95       	ret

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
